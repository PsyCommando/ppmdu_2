name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Prepare vcpkg
      run: ${{github.workspace}}/vcpkg/bootstrap-vcpkg.sh --disableMetrics

    - name: Setup Ninja + CMake
      uses: lukka/get-cmake@latest
      #uses: symbitic/install-cmake@master

    - name: Check CMake Version
      run: cmake -version

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset x64-linux-release "${{github.workspace}}"
      # run: cmake  -G "Ninja" -B "${{github.workspace}}/out/build" -DCMAKE_C_COMPILER:STRING="gcc" -DCMAKE_CXX_COMPILER:STRING="g++" -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE:STRING="Release" -DCMAKE_MAKE_PROGRAM="ninja" -DCMAKE_INSTALL_PREFIX:PATH="${{github.workspace}}/out/install/x64-linux-release" "${{github.workspace}}"

    - name: Build
      # Build your program with the given configuration
      run: pwd; ls -al; cmake --list-presets; cmake --build --preset x64-linux-release

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

