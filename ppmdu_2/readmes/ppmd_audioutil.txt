=======================================================
==  Baz the Poochyena's PMD:EoS/T/D - Audio Utility ==
======================================================
Version	   : 0.38
Released   : 2015/10/13
Written by : psy_commando (psycommando@gmail.com)

The entire sourcecode for all my tools that are part of this suite is available here:
https://github.com/PsyCommando/ppmdu/

----------------------------------------------------------------------------------------------------
Changelog:
----------------------------------------------------------------------------------------------------
- 0.1 : Initial release!
- 0.11: (2015/10/14) : 
        - Fixed tracks looping with a noticeable delay..
- 0.12: (2015/10/15) :
        - Fixed tracks without a loop point from looping!
- 0.13: (2015/10/17) :
        - Fixed samples not being exported from SWDL files!
- 0.2   (2015/12/07) :
        - Added Support for generating a conversion info XML file from a set of DSE containers.
          It means no more adding the data for every single programs by hands, the program writes it all
          and you can just edit the values as seen fit!
        - Now renders the samples' volume envelope directly into the sound samples to give a much more 
          accurate result.(with some mild artifacts for some tracks) 
          The soundfont generated with this method is much larger! To use the previous
          method, you can simply put a command line option as specified in the readme.
        - SYNTH WAVE SOUND SAMPLES, POSSIBLY OTHERS, ARE STILL COMPLETELY OFF-PITCH. 
          Sorry, but I can't find a solution right now, I'm not an audio engineer, I'm an audio noob.
          So I'll release the tool in its current state, since this release is long overdue !
        - Currently, XML + samples export is broken. Import is not yet implemented. So avoid using those!
        - A bunch of bugfixes, and an extra dose of validation so even professor layton can't crash 
          the program with its missing references! 
          (Exporting prof layton's soundtrack needs a bit more involvement and manual work on your part though..
          Not gonna describe the process here. But try extracting the common.darc file, and feeding the smds and swds to audioutil. 
          The main bank is named BG.SWD btw.)
        - MOAR BUGS! I know you guys love those. They're just really well hidden, 
          and you have to find them by accident :P
- 0.35 (2016/04/28) :
        - Added experimental support for ripping matched smd/swd pairs from any non-compressed or encrypted file format.
          Just use the 
                        -blobpath "path/to/file/containing/the/swd/and/smd/containers.whatever" 
          switch at the commandline.
          Its going to be very buggy, so keep that in mind. If it doesn't work, just rip each SWD and SMD individually
          and place them in their own files, and use the other commandline options!
        - Added support for SWD and SMD pairs stored individually into SIR0 containers/files 
          (The file extension is usually arbirtrary, so check the 4 char code for SIR0). 
          Use the switch
                         -bgmcntpath "Path/to/Directory" "FilextensionToLookFor"
          Just specify what the file extension all SIR0 files have as the second param, and the directory
          path as first. No need to put a dot or anything before the file extension.
          Its kind of redundant because the blobscanner can do the same thing, but at least this one
          can handle the SIR0s in batches unlike the blobscanner method above.
        - Tweaked some DSE events, and finally properly handles the modulation event, which I forgot
          about properly implementing for about 6 months now..
        - Made a lot of fixes and tweaking to everything.
        - Added a verbose option to cut on log size. The formatting is still pretty terrible, but it does the job.
        - Fixed a MASSIVE brainfart on my part. Samples weren't being correctly collected when doing a batch export.
          As a result, only the first samples were collected correctly. Some games which assigned a lot of samples slots
          were mostly spared from the issue. But it caused massive issues in other games!
        
        => KNOWN BUGS:
            - All PCM16 and possibly PCM8 samples exported to a soundfont will have the wrong pitch:
                That's due to me having to loop the samples when they're shorter than the shortest allowed samples 
                length for looping them according to the soundfont specification. And of course, "baking" the volume 
                envelope in the samples further worsen the issue.
                I'll have to see how the NDS loops PCM16 and PCM8 samples, because it doesn't appears to have this issue..
            - Samples don't have LFO effects applied to them:
                The soundfont format only supports 2 LFOs, while DSE supports 4. Not to mention,
                the oscillator's frenquency range is much wider on the NDS than in the soundfont format,
                so the effects are just impossible to convert to something equivalent.
                And to top it off, the NDS's resampling algorithm or the way the sample points are processed is
                particular because it gives a sort of ringy effect in some cases. And the people writing music
                for the games using DSE seems to have taken advantage of that. So it doesn't sound the same at all..
                Additionally, the depth parameter for the LFOs in DSE are an arbirtrary signed 16 bits integer value.
                So its hard to guess what it represents. But its definitely not a logarithmic value like the ones used in
                the sounfont format..
                And, the DSE format supports many more oscillator waveforms than soundfont can.
                    
                    =>tl;dr: Essentially, sounfonts will never be an accurate portrayal of the original music, 
                             because its literally impossible because of limitations in the sounfont format.
                             DLS isn't an alternative, as its almost just as limited. SFZ is seldom used,
                             and I don't know any players that supports those, so that's out of the question too.
                             I will make a Foobar2000 plugin instead I think.
- 0.36 (2016/05/01) :
        - Fixed "-nobake" generated sounfonts from sounding horribly off-pitch. Because I forgot to uncomment
          the line assigning the root key to each samples while I was testing stuff.
        - Removed the sample length legality check when building a soundfont. So really short samples
          aren't mangled anymore.

        + I'm still desperatly looking for help with the envelope duration calculations. Because the formula:
            lround( 1200 * log2(durationinsecond) )
          doesn't seems to give me accurate envelope phase durations, and that even considering that soundfont
          envelopes are logarithmic.
        + Still also trying to fix pitch issues with some samples.. But I got nothing..
		
- 0.37 (2017/12/14) :
		- Added multi sf2 export for games that do not use a main bank! It will now default to one sf2 per midi for games with
		  no main bank!
		- Tweaked the -blobpath switch so now you can specify a directory of "blob" files to scan and export!
	      Works very well with Soma!
		  
- 0.38 (//) :
		- Fixed oversight when comparing file extensions for DSE files. It would crash when comparing against file extensions longer than 3 characters.
-0.39 (//):
        - By default, the program will not bake volume envelopes into samples. You have to specify the -bake flag now for that to happen.


----------------------------------------------------------------------------------------------------
License info:
----------------------------------------------------------------------------------------------------
My code and tools are CC0. 
Free to re-use in any ways you may want to!
No crappyrights, all wrongs reversed! :3

This is not including any libraries I'm using that have their own licenses of course!!
The license for each of these libraries is indicated in their respective header files,
and they're all isolated in the "libraries" subfolder !

----------------------------------------------------------------------------------------------------
Special Thanks:
----------------------------------------------------------------------------------------------------
-> Many, many thanks to Zhorken for reversing most of the "PX" compression format! - https://github.com/Zhorken
-> A big thanks to Nerketur for his help !
-> A big thanks to TruePikachu for his help !
-> A big thanks to Evandixon for his help !
-> Thanks to the people from GBATemp and Project Pokemon Forums !
-> Thanks to MNChino for helping with some of my tools !
-> Thanks to wwylele for helping !
-> Thanks to TheGuitarHeroe, DAS, and the others for helping me spot audio issues!
-> Thanks to the people maintaining VGMTrans. It was very informative to see how they tackled some issues!
-> Thanks to Bregalad who wrote GBA Music Ripper! Once again, reading the code helped immensely figuring out
   how to take on the file formats in PMD2 !
-> Thanks to Ipatrix for his help and advice when dealing with NDS audio and etc!
-> Thanks to TeamFail for his advice.
-> Thanks to CyberBotX for the tips and much needed details on the NDS's sound system!
-> ..and anyone else I may have forgotten about ! ^^;

----------------------------------------------------------------------------------------------------
About:
----------------------------------------------------------------------------------------------------

This tool exports audio from the Pokemon Mystery Dungeon : Explorers of Sky/Time/Darkness games.
There is also limited support for othe games using the Digital Sound Element sound driver.
It works very well with Shiren2, and if you can extract the smd and swd files from any other
DSE-using game and feed those to the program, it will probably be able to export something !

It will eventually support importing back into DSE games music tracks and samples!


------------------------------
--Random Uninteresting Fact--:
------------------------------
The weird name is inspired from my EoS playthrough, where I cheated to get a Poochyena as starter. 
He turned out really good after ingesting so many gummies and pretty much carried the team 
most of the game! XD
And, I just love that pokemon, so yeah, that's pretty much it..

----------------------------------------------------------------------------------------------------
How to use:
----------------------------------------------------------------------------------------------------

->  To export the entire pmd2 BGM folder, just specify the path to the rom's root directory 
    and the -pmd2 commandline option, like so :

        ppmd_audioutil.exe -pmd2 "pmd2_extractedrom/data" "out_bgm"

->  To export a single SMDL file as-is, just drag and drop onto the executable.

->  To export a single SMDL using conversion rules, to make it use standard MIDI instruments
    specify the path to the conversion info file, using the -cvinfo option at the commandline
    like this :

        ppmd_audioutil.exe "pmd2_extractedrom\SOUND\BGM\bgm0003.smd" "bgm0003.mid" -cvinfo "pmd2eos_cvinfo.xml" -fl 1
  
  The option -fl 1 tells the program to loop the track again once after it played. It will only loop 
  tracks that have a loop point though.
  
  You can make your own, edit, or add to the cvinfo XML file ! The details are in the example
  file "pmd2eos_cvinfo.xml" ! 
  
-> To export the content of a SWDL file containing samples, simply drag and drop the file 
  onto the executable!

->  To export a set of smds and swds, WITHOUT a main bank, to a set of MIDIs and a Soundfont file, do the following :

        ppmd_audioutil.exe -swdlpath "path/to/swdfilesdirectory" -smdlpath "path/to/smdfilesdirectory" "OutputDirectory"

    To export a set of smds and swds, WITH a main bank, to a set of MIDIs and a Soundfont file, do the following :

        ppmd_audioutil.exe -swdlpath "path/to/swdfilesdirectory" -smdlpath "path/to/smdfilesdirectory" -mbank "path/to/mainbankfile/mainbank.swd" "OutputDirectory"

->  To list all presets used in a set of DSE containers, specify the path to a bunch of swd files, and append 
    the option -listpres to the commandline like so:

        ppmd_audioutil.exe -swdlpath "path/to/swdfilesdirectory" "OutputTextFilename.txt" -listpres

->  To generate a "blank", populated conversion info XML file for a set of smds and swds, specify the path to those files,
    and specify the option -makecvinfo at the commandline, like so:

        ppmd_audioutil.exe -swdlpath "path/to/swdfilesdirectory" -smdlpath "path/to/smdfilesdirectory" "OutputCvInfoFile.xml" -makecvinfo


->  To generate a log with a lot of verbose and details on the files handled when doing any of the above operations, simply append
        
        -log "logfile/path/logfile.txt" -v

    to the command line! Optionally remove the -v if there's too much stuff in there!


-> To export a batch of SMD and SWD pairs packed together in a SIR0 file, use the following:
    
        ppmd_audioutil.exe -bgmcntpath "Path/to/Directory" "FilextensionToLookFor" "Output/Directory"

    Replace the path/to/directory with the path to the directory containing all the SIR0 files containing the
    matched pairs. And be sure to specify the file extension that the SIR0 files have as the second parameter.
    No need to put a dot or asterisk before the file extension. Exemple "zip", "bgm", "pb" etc.. 


-> To export the SMD and SWD pairs out of a unknown file format, use the following:

        ppmd_audioutil.exe -blobpath "Path/to/blob/file.whatever" "Output/Directory"

    The "Path/to/blob/file.whatever" path specifies the file to scan for SMD/SWD pairs. It will batch export
    to midi + sounfont all matched pairs it finds by comparing their internal names in their header. 
	
-> To export the SMD and SWD pairs out of several files using an unknow file format within the same directory, use the following:

		ppmd_audioutil.exe -blobpath "Path/to/blob/directory/" "Output/Directory"
		
	All files within that directory will be considered to be individual blobs to be scanned.
	So use with caution!


# The option -nofx if specified will ignore all vibrato, phaser, volume oscillation(flanger?), cutoff effect, specified in the
    preset data! Its recommended to use this option, as the feature is pretty inaccurate and mostly incompatible, thanks to the terrible
    Soundfont format!

# The option -nobake force the program to export MIDI + Soundfont without rendering the linear "IAHDSDR" volume envelopes directly into 
    the samples. The soundont's limited logarithmic DAHDSR envelopes will be used instead and give a much less accurate result.

# The option -xml will output the DSE data to XML and raw numbered wav samples. The feature is a WIP.
    This will be eventually used for importing tracks from MIDI and samples back into the DSE format!

#  Use the -midi switch to force an export to midi with no soundfont! The midi files converted this way will be converted
    according to the details specified in any "CVInfo" file specified at the commandline using the -cvinfo switch.

*** NOTE: The -gm option is essentially unreliable, and bad. There is no way to guarantee that a track will always have
          less than 15 channels dedicated to chromatic instruments. And if that's the case, then forcing 
          events to a non-drum channel may be impossible without causing issues during playback, since most 
          midi players don't expect this kind of messing around. 
          Thus, the default GS export is preferred!


----------------------------------------------------------------------------------------------------
About CVInfo files
----------------------------------------------------------------------------------------------------
Since tracks used by most games won't use typical General Midi preset numbers, they'll sound like
an horrible cacophony if just ripped as-is. 

Since its impossible to guess what instruments is what, the program can use a file to tell it how
each presets should be converted. 
What MIDI instrument preset to use, if the notes needs to be transposed, if a different bank needs to
be used, or remapping keys for drum kit instruments.

This file format is simple human editable XML. And a tailor made base CVInfo file can be
automatically generated for you using the -makecvinfo option at the commandline.
You then only need to modify the content of the file to your liking!

And then you can specify that file at the command line using the -cvinfo option whenver you convert
the files to MIDI only. And all the resulting MIDI files will be converted according to your specifications!

An example CVInfo file is provided for Pokemon Mystery Dungeon : Explorers of Sky.  It contains a 
list of all the tags and what they do, along with a lot more details on what can be done!

----------------------------------------------------------------------------------------------------
Readme:
----------------------------------------------------------------------------------------------------
A utility to export and import music and sounds from the PMD2 games.

ppmd_audioutil.exe (option) (input path) (output path) 
  ->option         : An option from the list below..(optional)
  ->input path(opt): Path to the file/directory to export, or the directory to assemble.
  ->output path(opt): Output path. The result of the operation will be placed, and named according to this path!


Options:
  -gm        : Specifying this will modify the MIDIs to fit as much as possible with the General Midi standard. 
                Instruments remapped, and etc.. In short, the resulting MIDI will absolutely not be a 1:1 copy, 
                and using the original samples with this MIDI won't sound good either.. WARNING: General MIDI offers 
                16 tracks, with one forced to play drums. But there isn't a track forced to play drums in the DSE system. 
                So, some songs with just melody tracks simply can't be converted to GM and play correctly!!

  -fl        : This will export to the MIDI file the "intro" once, followed with the notes in-between the loop 
                and end marker the specified number of times. Loop markers will also be omitted!

  -pmd2      : Specifying this will tell the program that that input path is the root of the extracted ROM's 
                "data" directory.The utility will export the audio content from the entire 
                game's "/SOUND" directory, to a bunch of MIDIs and some soundfonts!

  -cvinfo    : The cvinfo file is an XML file containing information on how to convert SMDL files to MIDI. 
                It allows to change the original presets/bank to something else automatically. It also allows to 
                transpose notes by a certain preset, or change what key/preset is used when a certain key for a given 
                original preset is played. See the example file for more details!

  -makecvinfo: This will build a blank populated cvinfo.xml file from all the loaded swdl files specified using the 
                swdlpath option. or the bgmcntpath. The first parameter specified on the commandline will be the name 
                of the outputed cvinfo.xml file!

  -forcemidi : Specifying this will force a MIDI only export, regardless of the parameters specified.This is useful 
                when loading bgm containers for example, and wanting to export them to MIDIsaccording or not to the 
                rules specified in a cvinfo XML file.

  -mbank     : Use this to specify the path to the main sample bank that the SMDL to export will use, if applicable!
                Is also used to specify where to put the assembled 

  -swdlpath  : Use this to specify the path to the folder where the SWDLs matching the SMDL to export are stored.
                Is also used to specify where to put assembled DSE Preset during import.

  -smdlpath  : Use this to specify the path to the folder where the SMDLs to export are stored.
                Is also used to specify where to put MIDI files converted to SMDL format.

  -bgmcntpath: Use this to specify where to load bgm containers from. Aka, SMDL + SWDL wrapped together in a 
                SIR0 wrapper.The second argument is the file extension to look for, as most bgm containers have 
                different file extensions!

  -blobpath  : Use this to specify the path to a blob of DSE containers to process. AKA a file that contains 
                a bunch ofSMDL, SWDL, SEDL containers one after the other with no particular structure.
			   You can also specify a folder or use several -blobpath to designate several files to be handled.
			   When using a folder, all files within that directory with no exception will be scanned and converted, so use with caution!

  -listpres  : Use this to make the program export a list of all the presets used by the SWDL contained withinthe 
                swdlpath specified, or the input path if doing it for a single SWDL. If a swdlpath was specified, 
                the path to the outputed list is the first argument.If no swdlpath is specified the first argument 
                is the path to the swdl to use, andoptionally the second argument the path to the outputed list!

  -hexnum    : If this is present, whenever possible, the program will export filenames with hexadecimal numbers in them!

  -sf2       : Specifying this will export a swd soundbank to a soundfont if applicable.

  -xml       : Specifying this will force outputing a swd soundbank to XML data and pcm16 samples(.wav files).

  -bake      : Specifying this will enable the pre-rendering of individual samples envelopes for every preset split. In short, it'll render longer version of all samples, and apply the volume envelope directly to them.

  -nofx      : Specifying this will disable the processing of LFO effects data.

  -noconvert : Specifying this will disable the convertion of samples to pcm16 when exporting a bank. They'll be 
                exported in their original format.

  -log       : This option writes a log to the file specified as parameter.

  -v         : This enables the writing of a lot more info to the logfile!


Examples:
ppmd_audioutil.exe -gm -fl (nbofloops) -pmd2 -cvinfo "path/to/conversion/info/file.xml" -makecvinfo -forcemidi -mbank "SOUND/BGM/bgm.swd" -swdlpath "SOUND/BGM" -smdlpath "SOUND/BGM" -bgmcntpath "Path/to/BGMsDir" "bgm" -blobpath "Path/to/blob/file.whatever" -listpres -hexnum -sf2 -xml -nobake -nofx -noconvert -log "logfilename.txt" -v "c:/pmd_romdata/data.bin" "c:/pmd_romdata/data" 


----------------------------------------------------------------------------------------------------
Documentation :
----------------------------------------------------------------------------------------------------
See my thread here for links to my notes and etc: 
http://projectpokemon.org/forums/showthread.php?40199-Pokemon-Mystery-Dungeon-2-Psy_commando-s-Tools-and-research-notes
